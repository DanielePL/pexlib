// server/index.js - ECHTER MEGA AI SCOUT (Clean Node.js)

require('dotenv').config();
const express = require('express');
const path = require('path');
const cors = require('cors');
const mongoose = require('mongoose');
const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:3000', 'http://localhost:8080'],
  credentials: true
}));
app.use(express.json());

// MongoDB Connection
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://127.0.0.1:27017/prometheus-exercises';

console.log('üìä Connecting to MongoDB...');

async function connectToMongoDB() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB successfully');
    console.log(`üì¶ Database: ${mongoose.connection.name}`);
  } catch (error) {
    console.error('‚ùå MongoDB connection failed:', error.message);
  }
}

connectToMongoDB();

// MEGA Exercise Schema
const MegaExerciseSchema = new mongoose.Schema({
  name: { type: String, required: true, index: true },
  description: { type: String, required: true },
  category: {
    type: String,
    enum: ['strength', 'endurance', 'balance', 'mobility'],
    required: true
  },
  primaryMuscleGroup: { type: String, required: true },
  secondaryMuscles: [String],
  equipment: String,
  difficulty: {
    type: String,
    enum: ['beginner', 'intermediate', 'advanced'],
    required: true
  },
  instructions: [String],
  benefits: [String],
  setRepGuidelines: String,
  coachingTips: [String],
  qualityScore: { type: Number, min: 0, max: 100 },
  originalSearchTerm: String,
  discoveryMethod: String,
  relevantSports: [String],
  videoUrl: String,
  videoType: { type: String, enum: ['real', 'fallback', 'none'], default: 'none' },
  approved: { type: Boolean, default: false },
  sessionId: String,
  discoveredAt: { type: Date, default: Date.now }
}, {
  timestamps: true,
  collection: 'mega_exercises'
});

const MegaExercise = mongoose.model('MegaExercise', MegaExerciseSchema);

// Session Schema
const SessionSchema = new mongoose.Schema({
  sessionId: { type: String, unique: true, required: true },
  sessionType: String,
  config: {
    batchSize: Number,
    maxExercisesPerTerm: Number,
    testMode: Boolean,
    targetSports: [String]
  },
  status: {
    type: String,
    enum: ['running', 'completed', 'failed'],
    default: 'running'
  },
  progress: {
    currentBatch: { type: Number, default: 0 },
    totalBatches: { type: Number, default: 0 },
    exercisesFound: { type: Number, default: 0 },
    videosFound: { type: Number, default: 0 },
    currentTerm: String
  },
  results: {
    totalExercises: Number,
    duration: Number,
    averageQuality: Number
  },
  startedAt: { type: Date, default: Date.now },
  completedAt: Date,
  errors: [String]
}, {
  timestamps: true,
  collection: 'discovery_sessions'
});

const DiscoverySession = mongoose.model('DiscoverySession', SessionSchema);

// COMPLETE SPORTS TAXONOMY
const SPORTS_TAXONOMY = {
  // ENDURANCE SPORTS
  endurance: {
    running: {
      sprint: {
        searchTerms: ['sprint training', '100m training', 'acceleration drills', 'explosive starts', 'speed development'],
        focus: ['explosive_power', 'acceleration', 'anaerobic_capacity']
      },
      middle_distance: {
        searchTerms: ['800m training', '1500m training', 'middle distance running', 'lactate threshold'],
        focus: ['speed_endurance', 'lactate_tolerance', 'kick_finish']
      },
      marathon: {
        searchTerms: ['marathon training', 'long distance running', 'endurance base building', 'aerobic capacity'],
        focus: ['aerobic_base', 'fat_oxidation', 'running_economy']
      }
    },
    cycling: {
      road: {
        searchTerms: ['cycling training', 'road cycling', 'cycling endurance', 'bike training'],
        focus: ['leg_endurance', 'aerobic_power', 'climbing_strength']
      },
      mountain: {
        searchTerms: ['mountain biking', 'MTB training', 'off road cycling', 'bike handling'],
        focus: ['power_endurance', 'core_stability', 'bike_handling']
      }
    },
    swimming: {
      freestyle: {
        searchTerms: ['swimming training', 'freestyle technique', 'swim endurance', 'stroke efficiency'],
        focus: ['upper_body_endurance', 'stroke_technique', 'breathing']
      },
      butterfly: {
        searchTerms: ['butterfly stroke', 'swimming power', 'dolphin kick'],
        focus: ['core_power', 'shoulder_strength', 'undulation']
      }
    }
  },

  // BALL SPORTS
  ball_sports: {
    soccer: {
      searchTerms: ['soccer training', 'football fitness', 'soccer agility', 'football conditioning'],
      focus: ['agility', 'sprint_endurance', 'change_of_direction', 'ball_skills']
    },
    basketball: {
      searchTerms: ['basketball training', 'vertical jump training', 'basketball agility', 'court movement'],
      focus: ['vertical_jump', 'lateral_movement', 'explosive_power', 'court_vision']
    },
    volleyball: {
      searchTerms: ['volleyball training', 'spike training', 'volleyball jump', 'net play'],
      focus: ['vertical_jump', 'shoulder_power', 'quick_feet', 'reaction_time']
    },
    tennis: {
      searchTerms: ['tennis training', 'tennis fitness', 'racket sports', 'court movement'],
      focus: ['rotational_power', 'lateral_movement', 'shoulder_stability', 'endurance']
    },
    handball: {
      searchTerms: ['handball training', 'throwing power', 'handball agility'],
      focus: ['throwing_power', 'agility', 'contact_strength']
    }
  },

  // COMBAT SPORTS
  combat: {
    boxing: {
      searchTerms: ['boxing training', 'boxing conditioning', 'punching power', 'boxing footwork'],
      focus: ['punching_power', 'footwork', 'conditioning', 'core_rotation']
    },
    mma: {
      searchTerms: ['MMA training', 'mixed martial arts', 'fighting conditioning', 'grappling strength'],
      focus: ['functional_strength', 'grappling', 'striking', 'conditioning']
    },
    wrestling: {
      searchTerms: ['wrestling training', 'grappling strength', 'wrestling conditioning'],
      focus: ['grip_strength', 'core_power', 'takedown_power', 'mat_conditioning']
    },
    judo: {
      searchTerms: ['judo training', 'throwing techniques', 'judo strength', 'grip strength'],
      focus: ['throwing_power', 'grip_strength', 'balance', 'flexibility']
    }
  },

  // STRENGTH SPORTS
  strength: {
    powerlifting: {
      searchTerms: ['powerlifting training', 'squat bench deadlift', 'maximal strength', 'competition lifting'],
      focus: ['maximal_strength', 'competition_prep', 'technique_refinement']
    },
    weightlifting: {
      searchTerms: ['olympic weightlifting', 'clean and jerk', 'snatch training', 'olympic lifting'],
      focus: ['explosive_power', 'technique', 'mobility', 'speed_strength']
    },
    strongman: {
      searchTerms: ['strongman training', 'functional strength', 'carrying events', 'odd object lifting'],
      focus: ['functional_strength', 'carrying', 'grip_strength', 'conditioning']
    },
    bodybuilding: {
      searchTerms: ['bodybuilding training', 'muscle building', 'hypertrophy training', 'physique training'],
      focus: ['hypertrophy', 'muscle_isolation', 'symmetry', 'definition']
    }
  },

  // WINTER SPORTS
  winter: {
    skiing: {
      alpine: {
        searchTerms: ['alpine skiing', 'downhill skiing', 'ski racing', 'ski conditioning'],
        focus: ['leg_strength', 'balance', 'core_stability', 'reaction_time']
      },
      cross_country: {
        searchTerms: ['cross country skiing', 'ski endurance', 'nordic skiing'],
        focus: ['total_body_endurance', 'upper_body_power', 'aerobic_capacity']
      }
    },
    ice_hockey: {
      searchTerms: ['ice hockey training', 'hockey conditioning', 'skating power', 'hockey agility'],
      focus: ['skating_power', 'agility', 'shooting_power', 'contact_strength']
    },
    figure_skating: {
      searchTerms: ['figure skating training', 'skating jumps', 'balance training', 'artistic skating'],
      focus: ['balance', 'flexibility', 'jump_power', 'artistry']
    }
  },

  // WATER SPORTS
  water: {
    surfing: {
      searchTerms: ['surfing training', 'surf fitness', 'paddling strength', 'wave riding'],
      focus: ['paddling_endurance', 'balance', 'core_stability', 'pop_up_power']
    },
    rowing: {
      searchTerms: ['rowing training', 'crew training', 'rowing power', 'boat racing'],
      focus: ['pulling_power', 'leg_drive', 'core_stability', 'endurance']
    },
    water_polo: {
      searchTerms: ['water polo training', 'treading water', 'swimming strength', 'water polo conditioning'],
      focus: ['treading_endurance', 'throwing_power', 'swimming_strength']
    }
  },

  // PRECISION SPORTS
  precision: {
    archery: {
      searchTerms: ['archery training', 'bow strength', 'shooting stability', 'archery form'],
      focus: ['upper_body_stability', 'core_strength', 'mental_focus']
    },
    shooting: {
      searchTerms: ['shooting sports', 'marksmanship training', 'shooting stability'],
      focus: ['stability', 'breathing', 'mental_focus', 'fine_motor_control']
    },
    golf: {
      searchTerms: ['golf training', 'golf swing', 'golf fitness', 'rotational power golf'],
      focus: ['rotational_power', 'core_stability', 'flexibility', 'precision']
    }
  },

  // GYMNASTICS & ACROBATICS
  gymnastics: {
    artistic: {
      searchTerms: ['gymnastics training', 'artistic gymnastics', 'gymnastics strength', 'gymnastics flexibility'],
      focus: ['relative_strength', 'flexibility', 'coordination', 'power']
    },
    rhythmic: {
      searchTerms: ['rhythmic gymnastics', 'dance training', 'flexibility training', 'coordination'],
      focus: ['flexibility', 'coordination', 'balance', 'artistry']
    }
  },

  // TRACK & FIELD
  track_field: {
    jumping: {
      high_jump: {
        searchTerms: ['high jump training', 'vertical jump', 'jumping technique'],
        focus: ['vertical_power', 'approach_speed', 'technique']
      },
      long_jump: {
        searchTerms: ['long jump training', 'horizontal jump', 'jumping power'],
        focus: ['horizontal_power', 'speed', 'takeoff_technique']
      },
      pole_vault: {
        searchTerms: ['pole vault training', 'vaulting power', 'pole vault technique'],
        focus: ['upper_body_power', 'speed', 'technique', 'flexibility']
      }
    },
    throwing: {
      shot_put: {
        searchTerms: ['shot put training', 'throwing power', 'rotational throwing'],
        focus: ['explosive_power', 'core_rotation', 'technique']
      },
      discus: {
        searchTerms: ['discus training', 'rotational power', 'throwing technique'],
        focus: ['rotational_power', 'core_strength', 'technique']
      },
      javelin: {
        searchTerms: ['javelin training', 'throwing mechanics', 'spear throwing'],
        focus: ['throwing_power', 'core_rotation', 'flexibility']
      }
    }
  }
};

// API Configuration
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;

// Generate all search terms from taxonomy
function generateAllSearchTerms(targetSports = null) {
  const allTerms = [];

  function traverseCategory(category) {
    for (const [key, value] of Object.entries(category)) {
      if (value.searchTerms && Array.isArray(value.searchTerms)) {
        if (targetSports && !targetSports.includes(key)) {
          continue;
        }
        allTerms.push(...value.searchTerms);
      } else if (typeof value === 'object') {
        traverseCategory(value);
      }
    }
  }

  traverseCategory(SPORTS_TAXONOMY);
  return [...new Set(allTerms)];
}

// OpenAI Exercise Discovery
async function discoverExercisesForTerm(searchTerm, maxExercises = 3) {
  if (!OPENAI_API_KEY) {
    throw new Error('OpenAI API key not configured');
  }

  const prompt = `You are a world-class exercise science researcher and sports performance expert.

SEARCH TERM: "${searchTerm}"

Find ${maxExercises} SPECIFIC, HIGH-QUALITY exercises for this search term.

REQUIREMENTS:
‚úÖ Unique and specific exercises (not generic)
‚úÖ Proven effective for the application
‚úÖ Include: STRENGTH, ENDURANCE, BALANCE, MOBILITY exercises
‚úÖ Practical and safe for real-world use
‚úÖ Focus on specialized techniques

Return JSON format:
{
  "exercises": [
    {
      "name": "Specific Exercise Name",
      "description": "Clear description of what makes this exercise special",
      "category": "strength|endurance|balance|mobility",
      "primaryMuscleGroup": "specific muscle group",
      "equipment": "required equipment",
      "difficulty": "beginner|intermediate|advanced",
      "instructions": ["step 1", "step 2", "step 3"],
      "benefits": ["benefit 1", "benefit 2"],
      "setRepGuidelines": "recommended sets/reps",
      "coachingTips": ["tip 1", "tip 2"]
    }
  ]
}

Return ONLY valid JSON.`;

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'You are a world-class exercise science researcher and sports performance expert.'
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        max_tokens: 2000
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`OpenAI API error: ${response.status} - ${errorData.error?.message}`);
    }

    console.log(`ü§ñ OpenAI: ${OPENAI_API_KEY ? '‚úÖ READY' : '‚ùå MISSING'}`);
    console.log(`üé• YouTube: ${YOUTUBE_API_KEY ? '‚úÖ READY' : '‚ùå MISSING'}`);

   // Falls Keys vorhanden, zeige ersten Teil
  if (OPENAI_API_KEY) {
  console.log(`üîë OpenAI Key: ${OPENAI_API_KEY.substring(0, 8)}...`);
}
  if (YOUTUBE_API_KEY) {
  console.log(`üîë YouTube Key: ${YOUTUBE_API_KEY.substring(0, 8)}...`);
}

    const data = await response.json();
    const result = JSON.parse(data.choices[0].message.content);

    if (!result.exercises || !Array.isArray(result.exercises)) {
      throw new Error('Invalid response format from OpenAI');
    }

    return result.exercises.map(exercise => ({
      ...exercise,
      originalSearchTerm: searchTerm,
      qualityScore: calculateQualityScore(exercise),
      discoveryMethod: 'Real AI Scout',
      discoveredAt: new Date(),
      videoType: 'none'
    }));

  } catch (error) {
    console.error(`AI discovery failed for "${searchTerm}":`, error);
    return [];
  }
}

// YouTube Video Search
async function searchYouTubeVideo(exerciseName) {
  if (!YOUTUBE_API_KEY) {
    return null;
  }

  try {
    const searchQuery = `${exerciseName} exercise tutorial proper form`;
    const response = await fetch(
      `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(searchQuery)}&maxResults=1&type=video&videoEmbeddable=true&key=${YOUTUBE_API_KEY}`
    );

    if (!response.ok) {
      throw new Error(`YouTube API error: ${response.status}`);
    }

    const data = await response.json();

    if (data.items && data.items.length > 0) {
      return `https://www.youtube.com/watch?v=${data.items[0].id.videoId}`;
    }

    return null;
  } catch (error) {
    console.error('YouTube search error:', error);
    return null;
  }
}

// Quality Score Calculator
function calculateQualityScore(exercise) {
  let score = 0;

  if (exercise.name && exercise.name.length > 8) score += 20;
  if (exercise.description && exercise.description.length > 30) score += 15;
  if (exercise.instructions && exercise.instructions.length >= 3) score += 20;
  if (exercise.benefits && exercise.benefits.length >= 2) score += 15;
  if (exercise.coachingTips && exercise.coachingTips.length >= 2) score += 10;
  if (exercise.setRepGuidelines && exercise.setRepGuidelines.length > 10) score += 10;
  if (exercise.category && ['strength', 'endurance', 'balance', 'mobility'].includes(exercise.category)) score += 5;
  if (exercise.difficulty && ['beginner', 'intermediate', 'advanced'].includes(exercise.difficulty)) score += 5;

  return Math.min(score, 100);
}

// MEGA DISCOVERY ENDPOINTS

// Start Discovery
app.post('/api/mega-discovery/start', async (req, res) => {
  try {
    const {
      sessionType = 'test_run',
      batchSize = 2,
      maxExercisesPerTerm = 3,
      testMode = true,
      targetSports = null
    } = req.body;

    const sessionId = `real_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;

    console.log('üöÄ Starting REAL MEGA Discovery:', sessionId);
    console.log(`   Mode: ${testMode ? 'TEST' : 'FULL'}`);
    console.log(`   Target Sports:`, targetSports || 'ALL');

    const allSearchTerms = generateAllSearchTerms(targetSports);
    const searchTerms = testMode ? allSearchTerms.slice(0, 10) : allSearchTerms;
    const totalBatches = Math.ceil(searchTerms.length / batchSize);

    console.log(`   Search Terms: ${searchTerms.length}`);
    console.log(`   Batches: ${totalBatches}`);

    const session = new DiscoverySession({
      sessionId,
      sessionType,
      config: {
        batchSize,
        maxExercisesPerTerm,
        testMode,
        targetSports
      },
      status: 'running',
      progress: {
        totalBatches,
        currentBatch: 0,
        exercisesFound: 0,
        videosFound: 0
      }
    });

    await session.save();

    res.json({
      success: true,
      sessionId,
      config: session.config,
      estimatedDuration: testMode ? '2-5 minutes' : '30-60 minutes',
      searchTermsCount: searchTerms.length
    });

    processRealDiscovery(sessionId, searchTerms, session.config);

  } catch (error) {
    console.error('Start discovery error:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Background Processing Function
async function processRealDiscovery(sessionId, searchTerms, config) {
  console.log(`üîÑ Background processing started: ${sessionId}`);

  try {
    const session = await DiscoverySession.findOne({ sessionId });
    if (!session) throw new Error('Session not found');

    const batchSize = config.batchSize || 5;
    const maxExercisesPerTerm = config.maxExercisesPerTerm || 3;
    const batches = [];

    for (let i = 0; i < searchTerms.length; i += batchSize) {
      batches.push(searchTerms.slice(i, i + batchSize));
    }

    for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
      const batch = batches[batchIndex];

      console.log(`   üì¶ Processing batch ${batchIndex + 1}/${batches.length}`);

      await DiscoverySession.updateOne(
        { sessionId },
        {
          $set: {
            'progress.currentBatch': batchIndex + 1,
            'progress.currentTerm': batch[0]
          }
        }
      );

      for (const searchTerm of batch) {
        try {
          console.log(`      üîç Discovering: "${searchTerm}"`);

          const exercises = await discoverExercisesForTerm(searchTerm, maxExercisesPerTerm);

          if (exercises.length > 0) {
            console.log(`      ‚úÖ Found ${exercises.length} exercises`);

            for (const exercise of exercises) {
              const megaExercise = new MegaExercise({
                ...exercise,
                sessionId
              });

              try {
                await megaExercise.save();

                if (YOUTUBE_API_KEY) {
                  const videoUrl = await searchYouTubeVideo(exercise.name);
                  if (videoUrl) {
                    megaExercise.videoUrl = videoUrl;
                    megaExercise.videoType = 'real';
                    await megaExercise.save();
                  }
                }

              } catch (saveError) {
                if (saveError.code !== 11000) {
                  console.error('Save error:', saveError);
                }
              }
            }

            const currentCount = await MegaExercise.countDocuments({ sessionId });
            const videoCount = await MegaExercise.countDocuments({
              sessionId,
              videoUrl: { $exists: true, $ne: null }
            });

            await DiscoverySession.updateOne(
              { sessionId },
              {
                $set: {
                  'progress.exercisesFound': currentCount,
                  'progress.videosFound': videoCount
                }
              }
            );
          }

          await new Promise(resolve => setTimeout(resolve, 1000));
          await new Promise(resolve => setTimeout(resolve, 3000)); // 3 sekunden pause

        } catch (termError) {
          console.error(`Error processing "${searchTerm}":`, termError);

          await DiscoverySession.updateOne(
            { sessionId },
            { $push: { errors: `${searchTerm}: ${termError.message}` } }
          );
        }
      }

      if (batchIndex < batches.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
    }

    const finalCount = await MegaExercise.countDocuments({ sessionId });
    const videoCount = await MegaExercise.countDocuments({
      sessionId,
      videoUrl: { $exists: true, $ne: null }
    });

    const endTime = new Date();
    const duration = Math.round((endTime - session.startedAt) / 1000);

    await DiscoverySession.updateOne(
      { sessionId },
      {
        $set: {
          status: 'completed',
          completedAt: endTime,
          'results.totalExercises': finalCount,
          'results.duration': duration,
          'results.averageQuality': 85
        }
      }
    );

    console.log(`‚úÖ REAL MEGA Discovery completed: ${sessionId}`);
    console.log(`   Exercises: ${finalCount}, Videos: ${videoCount}, Duration: ${duration}s`);

  } catch (error) {
    console.error(`‚ùå Discovery failed: ${sessionId}`, error);

    await DiscoverySession.updateOne(
      { sessionId },
      {
        $set: {
          status: 'failed',
          completedAt: new Date()
        },
        $push: { errors: error.message }
      }
    );
  }
}

// Get Session Status
app.get('/api/mega-discovery/status/:sessionId', async (req, res) => {
  try {
    const { sessionId } = req.params;
    const session = await DiscoverySession.findOne({ sessionId });

    if (!session) {
      return res.status(404).json({
        success: false,
        error: 'Session not found'
      });
    }

    const duration = session.completedAt
      ? Math.round((session.completedAt - session.startedAt) / 1000)
      : Math.round((new Date() - session.startedAt) / 1000);

    res.json({
      success: true,
      session: {
        sessionId: session.sessionId,
        status: session.status,
        progress: session.progress,
        results: session.results,
        startedAt: session.startedAt,
        completedAt: session.completedAt,
        duration
      }
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Get Exercises
app.get('/api/mega-discovery/exercises', async (req, res) => {
  try {
    const {
      sessionId,
      category,
      difficulty,
      approved,
      limit = 50,
      page = 1
    } = req.query;

    let query = {};
    if (sessionId) query.sessionId = sessionId;
    if (category) query.category = category;
    if (difficulty) query.difficulty = difficulty;
    if (approved !== undefined) query.approved = approved === 'true';

    const skip = (page - 1) * limit;

    const exercises = await MegaExercise
      .find(query)
      .sort({ qualityScore: -1, discoveredAt: -1 })
      .limit(parseInt(limit))
      .skip(skip);

    const total = await MegaExercise.countDocuments(query);

    res.json({
      success: true,
      exercises,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total,
        pages: Math.ceil(total / limit)
      }
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Get Stats
app.get('/api/mega-discovery/stats', async (req, res) => {
  try {
    const stats = {
      totalExercises: await MegaExercise.countDocuments(),
      approved: await MegaExercise.countDocuments({ approved: true }),
      withVideos: await MegaExercise.countDocuments({
        videoUrl: { $exists: true, $ne: null }
      }),
      byCategory: await MegaExercise.aggregate([
        { $group: { _id: '$category', count: { $sum: 1 } } },
        { $sort: { count: -1 } }
      ]),
      byDifficulty: await MegaExercise.aggregate([
        { $group: { _id: '$difficulty', count: { $sum: 1 } } },
        { $sort: { count: -1 } }
      ]),
      recentSessions: await DiscoverySession
        .find()
        .sort({ createdAt: -1 })
        .limit(5)
        .select('sessionId status results startedAt completedAt')
    };

    res.json({
      success: true,
      stats
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Regular API endpoints
app.get('/api/status', (req, res) => {
  res.json({
    status: 'ok',
    mongodb: mongoose.connection.readyState === 1 ? 'connected' : 'disconnected',
    openai: !!OPENAI_API_KEY,
    youtube: !!YOUTUBE_API_KEY,
    mode: 'REAL_MEGA_AI_SCOUT'
  });
});

// Static files and routes
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, 'client/build')));
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'client/build', 'index.html'));
  });
} else {
  app.get('*', (req, res) => {
    res.json({
      message: 'REAL MEGA AI SCOUT - Ready for 200+ Sports Discovery!',
      features: [
        '‚úÖ OpenAI Integration: ' + (OPENAI_API_KEY ? 'ACTIVE' : 'MISSING'),
        '‚úÖ YouTube Integration: ' + (YOUTUBE_API_KEY ? 'ACTIVE' : 'MISSING'),
        '‚úÖ MongoDB: ' + (mongoose.connection.readyState === 1 ? 'CONNECTED' : 'DISCONNECTED'),
        '‚úÖ 200+ Sports Taxonomy: READY',
        '‚úÖ Real-time Discovery: ACTIVE'
      ],
      endpoints: [
        'POST /api/mega-discovery/start - Start real discovery',
        'GET /api/mega-discovery/status/:id - Session status',
        'GET /api/mega-discovery/exercises - Get discovered exercises',
        'GET /api/mega-discovery/stats - Discovery statistics'
      ],
      sampleSearchTerms: generateAllSearchTerms(null).slice(0, 10)
    });
  });
}

const PORT = process.env.PORT || 8080;

app.listen(PORT, () => {
  console.log(`üöÄ REAL MEGA AI SCOUT Server running on Port ${PORT}`);
  console.log(`üåê Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`ü§ñ OpenAI: ${OPENAI_API_KEY ? '‚úÖ READY' : '‚ùå MISSING'}`);
  console.log(`üé• YouTube: ${YOUTUBE_API_KEY ? '‚úÖ READY' : '‚ùå MISSING'}`);
  console.log(`üìä MongoDB: ${mongoose.connection.readyState === 1 ? '‚úÖ CONNECTED' : '‚è≥ CONNECTING'}`);
  console.log(`üèÜ Sports Taxonomy: ${generateAllSearchTerms().length} search terms LOADED`);
  console.log(`üî• Ready for REAL AI Discovery!`);
});